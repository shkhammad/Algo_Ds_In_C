#include <stdio.h>
#include <stdlib.h>

struct digit {
    int num;
    struct digit *next;
};


// Add a prototype for countRedun() here
struct digit * createDigit(int);
struct digit * append(struct digit * end, struct digit * newDigptr);
void printNumber(struct digit *);
void freeNumber(struct digit *);
struct digit *readNumber(void);
int divisibleByThree(struct digit * start);
int changeThrees(struct digit * start);
int countRedun(struct digit *start);
struct digit * sortNumbers1(struct digit *start);
struct digit * sortNumbers2(struct digit *start,struct digit *newptr);
struct digit * insertatfront(struct digit *start,struct digit *newptr);
// Do not modify this main() function
int main(void) {
    struct digit *start;
    start = readNumber();

    printf("The number ");
    printNumber(start);
    printf("contains %d redundancies.\n", countRedun(start));

    freeNumber(start);

    return 0;
}

struct digit *createDigit(int dig) {
    struct digit *ptr;
    ptr = (struct digit *) malloc(sizeof(struct digit));
    ptr->num = dig;
    ptr->next = NULL;
    return ptr;
}

struct digit * append(struct digit * end, struct digit * newDigptr) {
    end->next = newDigptr;
    return(end->next);
}

void printNumber(struct digit *start) {
    struct digit * ptr = start;
    while (ptr!=NULL) {
        printf("%d", ptr->num);
        ptr = ptr->next;
    }
    printf("\n");
}

void freeNumber(struct digit *start) {
    struct digit * ptr = start;
    struct digit * tmp;
    while (ptr!=NULL) {
        tmp = ptr->next;
        free(ptr);
        ptr = tmp;
    }
}

struct digit *readNumber(void) {
    char c;
    int d;
    struct digit *start, *end, *newptr;
    start = NULL;
    scanf("%c", &c);
    while (c != '\n') {
        d = c-48;
        newptr = createDigit(d);
        if (start == NULL) {
            start = newptr;
            end = start;
        } else {
            end = append(end, newptr);
        }
        scanf("%c", &c);
    }
    return(start);
}

int divisibleByThree(struct digit * start) {
    struct digit * ptr = start;
    int qsum = 0;
    while (ptr!=NULL) {
        qsum += ptr->num;
        ptr = ptr->next;
    }
    if (qsum%3==0) return 1;
    else return 0;
}

int changeThrees(struct digit * start) {
    struct digit * ptr = start;
    int sum = 0;
    while (ptr!=NULL) {
        if (ptr->num == 3) {
            ptr->num = 9;
            sum++;
        }
        ptr = ptr->next;
    }
    return(sum);
}

// Write your countRedun() function here
int countRedun(struct digit *start){

    struct digit *sorted=sortNumbers1(start);
    struct digit *pre;
    int count=0;
    pre=sorted;
    sorted=sorted->next;
    while(sorted!=NULL)
    {
        if((sorted->num)==(pre->num))
        count++;
        pre=sorted;
        sorted=sorted->next;
    }
    return count;
}

struct digit * sortNumbers1(struct digit *start)
{
   struct digit *ptr=start;
   struct digit *sorted=NULL;
   struct digit *newptr;
   if(start!=NULL)
   {
       sorted=createDigit(start->num);
       ptr=ptr->next;
   }
   while(ptr!=NULL)
   {
       newptr=createDigit(ptr->num);
       sorted=sortNumbers2(sorted,newptr);
       ptr=ptr->next;
   }
   return sorted;
}
struct digit * insertatfront(struct digit *start,struct digit *newptr)
{
    newptr->next=start;
    return newptr;
}
struct digit * sortNumbers2(struct digit *start,struct digit *newptr)
{
    struct digit *ptr=start;
    struct digit *pre=NULL;
    while((ptr!=NULL) && (ptr->num)<(newptr->num))
    {
        pre=ptr;
        ptr=ptr->next;
    }
    if(pre==NULL)
    {
        start=insertatfront(start,newptr);
    }
    else
    {
        pre->next=newptr;
        newptr->next=ptr;
    }
    return start;
}

***************NEW PROGRAM*********************************************

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct student {
      char name[50];
      int age;
      struct student *next;
};

struct student *createStudent(char studentName[], int studentAge);

// Write other function prototypes here (if any)

int main(void) {
    //LINKED LIST-1..
    struct student *studptr;
    int myAge;
    char myName[50];
    scanf("%s %d", myName, &myAge);
    studptr = createStudent(myName, myAge);
    printf("New student created: %s is %d years old.\n", studptr->name, studptr->age);
    free(studptr);
    return 0;
}

// Write your createStudent function here (and any other functions you see fit)
struct student *createStudent(char studentName[50], int studentAge)
{
    struct student *ptr;
    ptr=(struct student *)malloc(sizeof(struct student));
    ptr->age=studentAge;
    strcpy(ptr->name,studentName);
    ptr->next=NULL;
    return ptr;
}















